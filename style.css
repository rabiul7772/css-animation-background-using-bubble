* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  min-height: 100vh;
  background-color: #0c192c;
}

.container {
  position: relative;
  width: 100%;
  min-height: 100vh;
  overflow: hidden;
}

.bubbles {
  position: relative;
  display: flex;
}

.bubbles span {
  position: relative;
  width: 30px;
  height: 30px;
  background: #4fc3dc;
  margin: 0 4px;
  border-radius: 50%;
  box-shadow: 0 0 0 10px #4fc3dc44, 0 0 50px #4fc3dc, 0 0 100px #4fc3dc;
  animation: animate 15s linear infinite;
  animation-duration: calc(140s / var(--i));
  /* here var function is used to provide different animation duration to different span elements */
}

.bubbles span:nth-child(even) {
  background: #ff2d75;
  box-shadow: 0 0 0 10px #ff2d7544, 0 0 50px #ff2d75, 0 0 100px #ff2d75;
}

@keyframes animate {
  0% {
    transform: translateY(100vh) scale(0);
    /* transform will be start from 100vh which is bottom of the screen ,and scale 0 defines transform will start form zero size*/
  }

  25% {
    transform: translateY(75vh) scale(0.25);
  }

  50% {
    transform: translateY(50vh) scale(0.75);
  }
  100% {
    transform: translateY(-10vh) scale(0);
    /* transform will be end to -10vh which is 10vh above from the top of the screen  ,and scale 1 defines transform will end to it's original size */
  }
}

/* First: here it is using (inline variables)  like in the example (--i:number), how does that work? By controlling the tag by numbers like a class, how is that? By animation-duration dividing the number of seconds by the number, the speed of the tag will be the result of the division, for example: 120s / 1=120s This means that the tag will move from bottom to top within 120s = 2min and this of course will take time, but if you divide 120s / 30=4s This will only take 4s.
 and this calculation only works using the calculator calc, like in the example calc (120 / var(--i) ), and you can put any name for the variable that will work for you also easily , (here, also span is an inline element) */
